Command-Line Flags

	Command-line flags are a common way to specify options for command-line programs. For example, in wc -l the -l is a command-line flag.

	Go provides a flag package supporting basic command-line flag parsing. We’ll use this package to implement our example command-line program.

//syntax
variable := flag.String("flagName", "defaultValue", "Description if the flag")
//example
wordPtr := flag.String("word", "foo", "a string")

	Basic flag declarations are available for string, integer, and boolean options. Here we declare a string flag word with a default value "foo" and a short description. This flag. The string function returns a string pointer (not a string value); we’ll see how to use this pointer below.

var svar string
flag.StringVar(&svar, "svar", "bar", "a string var")

	It’s also possible to declare an option that uses an existing var declared elsewhere in the program. Note that we need to pass in a pointer to the flag declaration function.

	Once all flags are declared, call flag.Parse() to execute the command like parsing.

	flag.Parse()

Here is the example to demonstrate:

	To experiment with the command-line flags program it’s best to first compile it and then run the resulting binary directly.

		go build command-line-flags.go

	Try out the built program by first giving it values for all flags.

		./command-line-flags -word=opt -numb=7 -fork -svar=flag

	Note that if you omit flags they automatically take their default values.

		./command-line-flags -word=opt

	Trailing positional arguments can be provided after any flags.

		./command-line-flags -word=opt a1 a2 a3

	Use -h or --help flags to get automatically generated help text for the command-line program.

		./command-line-flags -h

	If you provide a flag that wasn’t specified to the 

		flag

	package, the program will print an error message and show the help text again.

		./command-line-flag -myFlag=1234

	flag provided but not defined: -myFlag

Usage of ./command-line-flag:
  -fork
        a bool
  -numb int
        an int (default 42)
  -svar string
        a string var (default "bar")
  -word string
        a string (default "foo")