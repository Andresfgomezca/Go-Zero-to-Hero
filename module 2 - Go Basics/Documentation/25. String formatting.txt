String Formatting

	Go offers excellent support for string formatting in the printf tradition. Here are some examples of common string formatting tasks.

	Go offers several printing “verbs” designed to format general Go values. For example, this prints an instance of our point struct.

p := point{1, 2}
fmt.Printf("struct1: %v\n", p)

	If the value is a struct, the %+v variant will include the struct’s field names.

fmt.Printf("struct2: %+v\n", p)

	The %#v variant prints a Go syntax representation of the value, i.e. the source code snippet that would produce that value.

fmt.Printf("struct3: %#v\n", p)

	To print the type of a value, use %T.

fmt.Printf("type: %T\n", p)

	Formatting booleans is straight-forward.

fmt.Printf("bool: %t\n", true)

	There are many options for formatting integers. Use %d for standard, base-10 formatting.

fmt.Printf("int: %d\n", 123)